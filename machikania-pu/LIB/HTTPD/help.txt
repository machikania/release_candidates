＜クラス名およびバージョン＞
HTTPD
ver 0.3.2

＜ファイル名＞
HTTPD.BAS

＜ライセンス＞
BASファイルは、パブリックドメイン。

＜概要＞
Wifi接続時に、HTTPサーバーを構築するためのクラス。mimeはファイルの拡張子で一意的に決定される(mime.txtを参照)。

＜コンストラクター＞
第一引数
	ポート番号。省略した場合は、80。
第二引数
	サーバー公開するディレクトリー。省略した場合は、現在のディレクトリーを選択。

＜メソッド＞
START()
	クライアントからの接続待ち。接続があれば、クライアントに返信した後に、このメソッドは終了する。

LASTURI$()
	前回接続時にリクエストされたURIを文字列として返す。

GETPARAM$([x$])
	前回接続時のURIに含まれる、GETメソッドのパラメーター情報を返す。x$を指定したときは、そのパラメーターの設定値を、x$を省略した時は、URIの「?」以降の文字列を返す。

POSTHANDLER(funcaddress(xxx))
	POSTメソッドを処理するためのコールバック関数を指定する。xxxは、コールバック関数のラベル名。コールバック関数の実装方法については、下記参照。

CGIHANDLER(funcaddress(xxx))
	CGIを処理するためのコールバック関数を指定する。xxxは、コールバック関数のラベル名。コールバック関数の実装方法については、下記参照。このコールバック関数は、拡張子が「.CGI」の、存在しないファイルにアクセスした時に呼ばれる。

＜パブリックフィールド＞
STATUS
	前回接続時のステータス番号。200, 404など。
HTTPD::RHEADER$
	クライアントからのリクエストヘッダーを保持する文字列。
HTTPD::URI$
	アクセスしたURIを保持する文字列。

＜コールバック関数の実装方法＞
POSTメソッドの扱いやCGIは、コールバック関数を呼び出すことで実装できます。ここで使用されるコールバック関数は、POSTHANDERメソッドやCGIHANDLERメソッドを使って登録してください。

コールバック関数中では、以下の引数が使えます。
	args$(1): クライアントからのリクエストの全文を保存したファイルのファイル名
	args$(2): クライアントからのリクエストの全文を保存したファイルが存在するディレクトリー名
	args$(3): HTTPサーバーのルートディレクトリー

また、HTTPD::RHEADER$やHTTPD::URI$から、情報を得る事も出来ます。

戻り値としては、クライアントに返す内容を、ヘッダーを含めた形で文字列で返してください。文字列で返せない場合（画像などのバイナリーである場合、返信バイト数が大きい場合など）は、別途返信用のファイルを作成して、ステータス303でそれにリダイレクトするヘッダーを返す方法が有効です。

コールバック関数中でA-Zの変数を使用する場合は、必ず「var」指定してください。

＜一部のファイルへのアクセスを規制する方法＞
embedで使用する場合など、一部のファイルへのアクセスを制限したい場合は、mime.txtを編集し、ファイル先頭に記述を追加してください。例えば、「*.ini」ファイルをすべてアクセスできないようにしたい場合、「ini 404」もしくは「ini 403」と記述します。それぞれ、サーバーは「404 Not Found」もしくは「403 Forbidden」を返すようになります。

＜使用例＞
useclass HTTPD
h=new(HTTPD,80,"/httproot")
print "server started"
do
  h.START()
  system 201,val(h.GETPARAM$("led"))
loop

<html><head><title>Test</title>
<meta name="viewport" content="width=1, initial-scale=5"></head>
<body>
<h5 style="text-align:center"><a href="?led=1">ON</a></h5>
<h5 style="text-align:center"><a href="?led=0">OFF</a></h5>
</body></html>
